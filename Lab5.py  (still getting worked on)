# Implementation of hash tables with chaining using strings
#Lab 5
#Cesar Lopez

class HashTableC(object):
    # Builds a hash table of size 'size'
    # Item is a list of (initially empty) lists
    # Constructor
    def __init__(self,size):  
        self.item = []
        self.num_items = 0
        for i in range(size):
            self.item.append([])
        
def InsertC(H,k,l):
    # Inserts k in appropriate bucket (list) 
    # Does nothing if k is already in the table
    H.num_items += 1
    if H.num_items/len(H.item) >= 1:
        for i in range(len(H.item)+1):
            H.item.append([])
        b = h(k,len(H.item))
        H.item[b].append([k,l]) 
    else:
        b = h(k,len(H.item))
        H.item[b].append([k,l]) 
   
def FindC(H,k):
    # Returns bucket (b) and index (i) 
    # If k is not in table, i == -1
    b = h(k,len(H.item))
    for i in range(len(H.item[b])):
        if H.item[b][i][0] == k:
            return b, i, H.item[b][i][1]
    return b, -1, -1
 
def h(s,n):
    r = 0
    for c in s:
        r = (r*n + ord(c))% n
    return r

def dotProduct(w1, w2):
    hold = 0
    for i in range(len(w1)):
        hold += float(w1[i])*float(w2[i])
    return hold

def sim(H, w1, w2):
    print(H[0][0][0])
    e1 = FindC(H, w1)
    e2 = FindC(H, w2)
    print(e1)
    dp = dotProduct(e1, e2)
    return dp

def IsEmpty(H):
    count = 0
    for i in range(len(H.item)):
        if len(H.item[i]) == 0:
            count += 1
    return count

choice = input("Type 1 for Binary Search Tree, or 2 for Hash Table with chaining")
print(choice)
if(choice == '1'):
    print("Your choice is: Binary Search Tree")
    print()
    print("Building Binary Search Tree..")
elif(choice == '2'):
    print("Your choice is: Hash Table")
    print()
    print("Building Hash Table...")
    a = []
    H = HashTableC(13)
    f = open('glove.6B.50d.txt', encoding='utf-8')
    for line in f:
        a = line.split(' ')
        word = line.split(' ')[0]
        a = a[1:-1]
        InsertC(H, word, a)
    print("Hash Table Stats:")
    print("Initial Size: 13")
    print("Load Factor: ", H.num_items/len(H.item))
    print("Percentage of Empty list", (IsEmpty(H)/len(H.item))*100)
    print("Standard Deviation of Lengths of list: ")
    H2 = HashTableC(len(H.item))
    for x in range(len(H.item)):
        for y in range(len(H.item[x])):
            InsertC(H2, H.item[x][y][0], H.item[x][y][1])
    file = open('input.txt', encoding='utf-8')
    for lin in file:
        b = lin.split(' ')
        word1 = b[0]
        word2 = b[1]
        print(sim(H2, word1, word2))
else:
    print("Wrong input, relaunch and try again.")
